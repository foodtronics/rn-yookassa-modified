{"version":3,"sources":["tokenize.ts"],"names":["RnYookassa","NativeModules","tokenize","params","Promise","resolve","reject","result","error","YooKassaError","code","message"],"mappings":";;;;;;;AAAA;;AAOA;;AAEA,MAAMA,UAAU,GAAGC,2BAAcD,UAAjC;;AAEO,SAASE,QAAT,CACLC,MADK,EAEwB;AAC7B,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCN,IAAAA,UAAU,CAACE,QAAX,CACEC,MADF,EAEE,CAACI,MAAD,EAA8BC,KAA9B,KAAsD;AACpD,UAAID,MAAJ,EAAY;AACVF,QAAAA,OAAO,CAACE,MAAD,CAAP;AACD,OAFD,MAEO;AACL,YAAIC,KAAJ,EAAW;AACTF,UAAAA,MAAM,CAAC,IAAIG,sBAAJ,CAAkBD,KAAK,CAACE,IAAxB,EAA8BF,KAAK,CAACG,OAApC,CAAD,CAAN;AACD,SAFD,MAEO;AACLL,UAAAA,MAAM;AACP;AACF;AACF,KAZH;AAcD,GAfM,CAAP;AAgBD","sourcesContent":["import { NativeModules } from 'react-native';\n\nimport type {\n  TokenizationParams,\n  TokenizationResult,\n  ErrorResult,\n} from '../types';\nimport { YooKassaError } from '../classes';\n\nconst RnYookassa = NativeModules.RnYookassa;\n\nexport function tokenize(\n  params: TokenizationParams\n): Promise<TokenizationResult> {\n  return new Promise((resolve, reject) => {\n    RnYookassa.tokenize(\n      params,\n      (result?: TokenizationResult, error?: ErrorResult) => {\n        if (result) {\n          resolve(result);\n        } else {\n          if (error) {\n            reject(new YooKassaError(error.code, error.message));\n          } else {\n            reject();\n          }\n        }\n      }\n    );\n  });\n}\n"]}